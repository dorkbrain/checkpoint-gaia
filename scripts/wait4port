#!/usr/bin/env python3
import argparse
import socket
from datetime import datetime
import time

def portCheck(host, port, timeout):
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.settimeout(timeout)
  result = sock.connect_ex((host, port))
  if result == 0:
    return True
  else:
    return False

if __name__ == "__main__":
  parser = argparse.ArgumentParser(description='Check TCP port status of remote host(s)')
  parser.add_argument('host', nargs='*', help='List of hosts to check separated by spaces.  To specify a port use host:port, otherwise the default port used is 22.')
  parser.add_argument('-w', '--watch', dest='watch', action='store_true', required=False, help='Keep checking even if port is up')
  parser.add_argument('-d', '--delay', dest='delay', type=int, default=1, required=False, metavar='n', help='Seconds to wait between port checks (default=1)')
  parser.add_argument('-t', '--timeout', dest='timeout', type=int, default=5, required=False, metavar='n', help='TCP port timeout (default=5)')
  
  args = parser.parse_args()

  try:
    if not args.host:
      args = parser.parse_args(['--help'])
    else:
      while args.host:
        for thisHost in args.host.copy():
          if ":" in thisHost:
            host, port = thisHost.split(":")
            port = int(port)
          else:
            host = thisHost
            port = 22
          print(f'{datetime.now().strftime("%m-%d-%y %H:%M:%S")}: [\x1b[s    ] . . . . . {host}:{port}\x1b[u', end='', flush=True)
          if portCheck(host, port, args.timeout):
            print("\x1b[1;32m UP \x1b[0m")
            if not args.watch:
                args.host.remove(thisHost)
          else:
            print("\x1b[1;31mDOWN\x1b[0m")

        if args.host:
          print(f"\x1b[sDelaying {args.delay}s . . .", end='', flush=True)
          time.sleep(args.delay)
          print('\x1b[u\x1b[2K', end='', flush=True)


  except KeyboardInterrupt:
    print()
    pass
